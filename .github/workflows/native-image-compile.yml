name: Build GraalVM Native Image

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Set up GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          distribution: 'graalvm'
          components: native-image

      - name: Build with Maven
        run: mvn -Pnative native:compile -DskipTests
        env:
          MAVEN_OPTS: '-Dfile.encoding=UTF-8'

      - name: Create self-extracting EXE using IEXPRESS (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          @echo off
            echo @echo off > run_utf8.bat
            echo chcp 65001 >> run_utf8.bat
            echo "timepill-backup-17.exe" %* >> run_utf8.bat
          
          @echo off
              echo [Version] >config.sed
              echo Class=IEXPRESS >>config.sed
              echo SEDVersion=3 >>config.sed
              echo [Options] >>config.sed
              echo PackagePurpose=InstallApp >>config.sed
              echo ShowInstallProgramWindow=0 >>config.sed
              echo HideExtractAnimation=1 >>config.sed
              echo UseLongFileName=1 >>config.sed
              echo InsideCompressed=0 >>config.sed
              echo CAB_FixedSize=0 >>config.sed
              echo CAB_ResvCodeSigning=0 >>config.sed
              echo RebootMode=N >>config.sed
              echo InstallPrompt=%%InstallPrompt%% >>config.sed
              echo DisplayLicense=%%DisplayLicense%% >>config.sed
              echo FinishMessage=%%FinishMessage%% >>config.sed
              echo TargetName=%%TargetName%% >>config.sed
              echo FriendlyName=%%FriendlyName%% >>config.sed
              echo AppLaunched=%%AppLaunched%% >>config.sed
              echo PostInstallCmd=%%PostInstallCmd%% >>config.sed
              echo AdminQuietInstCmd=%%AdminQuietInstCmd%% >>config.sed
              echo UserQuietInstCmd=%%UserQuietInstCmd%% >>config.sed
              echo SourceFiles=SourceFiles >>config.sed
              echo [Strings] >>config.sed
              echo InstallPrompt= >>config.sed
              echo DisplayLicense= >>config.sed
              echo FinishMessage= >>config.sed
              echo TargetName=timepill-backup-17-windows.exe >>config.sed
              echo FriendlyName=timepill-backup >>config.sed
              echo AppLaunched=cmd.exe /d /c "run_utf8.bat" >>config.sed
              echo PostInstallCmd=^<None^> >>config.sed
              echo AdminQuietInstCmd= >>config.sed
              echo UserQuietInstCmd= >>config.sed
              echo FILE0="target/native/timepill-backup-17.exe" >>config.sed
              echo FILE1="run_utf8.bat" >>config.sed
              echo [SourceFiles] >>config.sed
              echo SourceFiles0=%~dp0 >>config.sed
              echo [SourceFiles0] >>config.sed
              echo %%FILE0%%= >>config.sed
              echo %%FILE1%%= >>config.sed
          
            iexpress.exe /N /Q /M config.sed
            
      - name: List contents of the workspace
        run: ls -R
        
      - name: Rename native image (macOS)
        if: runner.os == 'macOS'
        run: |
          mkdir -p ./timepill-backup-17-macos
          mv target/native/timepill-backup-17 ./timepill-backup-17-macos/timepill-backup-17

      - name: Upload native image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: native-image-${{ matrix.os }}
          path: ${{ runner.os == 'macOS' && './timepill-backup-17-macos/timepill-backup-17' || './timepill-backup-17-windows.exe' }}

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
      - name: List contents of the workspace
        run: ls -R

      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: native-image-macos-latest
          path: ./dist

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: native-image-windows-latest
          path: ./dist

      - name: List target directory
        run: ls -R ./dist

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: binaries-${{ github.run_id }}
          release_name: release-${{ github.run_id }}
          draft: false
          prerelease: false

      - name: Upload macOS binary to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/timepill-backup-17
          asset_name: timepill-backup-17-macOS
          asset_content_type: application/octet-stream

      - name: Upload Windows binary to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/timepill-backup-17-windows.exe
          asset_name: timepill-backup-17-windows.exe
          asset_content_type: application/octet-stream
