name: Build GraalVM Native Image

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    permissions: write-all
    
    steps:
     - name: Check iexpress.exe availability (Windows)
       if: runner.os == 'Windows'
       shell: cmd
       run: |
          where.exe iexpress.exe

     - name: Checkout code
       uses: actions/checkout@v3

     - name: Download release asset
       shell: pwsh
       env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       run: |
          # Define variables
          $owner = "socia1ca3t"
          $repo = "timepill-backup-17" 
          $releaseTag = "release-10370406030"
          $assetName = "timepill-backup-17-windows.exe"
          $githubToken = $env:GITHUB_TOKEN
          
          # Get the release by tag name
          $release = Invoke-RestMethod -Uri "https://api.github.com/repos/$owner/$repo/releases/tags/$releaseTag" `
                    -Headers @{ "Authorization" = "Bearer $githubToken"; "Accept" = "application/vnd.github+json"; "X-GitHub-Api-Version" = "2022-11-28" }
                    
          # Get the asset download URL
          $asset = $release.assets | Where-Object { $_.name -eq $assetName }
          $assetUrl = $asset.browser_download_url
          
          # Download the asset
          Invoke-WebRequest -Uri $assetUrl -OutFile $assetName
          
          # Verify the download
          Get-Item $assetName
